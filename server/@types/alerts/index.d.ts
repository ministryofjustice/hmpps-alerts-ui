/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
  '/alerts/{alertUuid}': {
    /**
     * Get an alert by its unique identifier
     * @description Returns the alert with the matching identifier.
     *
     * Requires one of the following roles:
     * * ROLE_ALERTS_READER
     * * ROLE_ALERTS_ADMIN
     * * PRISON
     * * ROLE_NOMIS_ALERTS
     */
    get: operations['retrieveAlert']
    /**
     * Update an alert
     * @description
     *
     * Requires one of the following roles:
     * * ROLE_ALERTS_WRITER
     * * ROLE_ALERTS_ADMIN
     * * UPDATE_ALERT
     * * ROLE_NOMIS_ALERTS
     */
    put: operations['updateAlert']
    /**
     * Delete an alert
     * @description This endpoint fully removes the alert from the system. It is used when an alert has been created in error or should otherwise be removed from this service. This endpoint will return 200 OK if the alert was not found or already deleted. This is to prevent low value warnings being logged.
     *
     * Requires one of the following roles:
     * * ROLE_ALERTS_WRITER
     * * ROLE_ALERTS_ADMIN
     * * UPDATE_ALERT
     * * ROLE_NOMIS_ALERTS
     */
    delete: operations['deleteAlert']
  }
  '/migrate/{prisonNumber}/alerts': {
    /**
     * Migrate all alerts for a prisoner from NOMIS
     * @description
     *
     * Requires one of the following roles:
     * * ROLE_ALERTS_ADMIN
     * * ROLE_NOMIS_ALERTS
     */
    post: operations['createAlert']
  }
  '/migrate/alerts': {
    /**
     * Migrate an alert from NOMIS
     * @deprecated
     * @description
     *
     * Requires one of the following roles:
     * * ROLE_ALERTS_ADMIN
     * * ROLE_NOMIS_ALERTS
     */
    post: operations['migrateAlert']
  }
  '/bulk-alerts': {
    /**
     * Create alerts for multiple people in bulk
     * @description
     *
     * Requires one of the following roles:
     * * ROLE_ALERTS_ADMIN
     */
    post: operations['bulkCreateAlerts']
  }
  '/alerts': {
    /**
     * Create an alert
     * @description
     *
     * Requires one of the following roles:
     * * ROLE_ALERTS_WRITER
     * * ROLE_ALERTS_ADMIN
     * * UPDATE_ALERT
     * * ROLE_NOMIS_ALERTS
     */
    post: operations['createAlert_1']
  }
  '/alert-types': {
    /**
     * Get all alert types
     * @description Returns the full list of alert types and the alert codes within those types. By default this endpoint only returns active alert types and codes. The include inactive parameter can be used to return all alert types and codes.
     *
     * Requires one of the following roles:
     * * ROLE_ALERTS_READER
     * * ROLE_ALERTS_ADMIN
     * * PRISON
     */
    get: operations['retrieveAlertTypes']
    /**
     * Create an alert type
     * @description Create a new alert type, typically from the Alerts UI
     *
     * Requires one of the following roles:
     * * ROLE_ALERTS_ADMIN
     */
    post: operations['createAlertType']
  }
  '/alert-codes': {
    /**
     * Retrieve all alert codes
     * @description Retrieve all alert codes, typically from the Alerts UI
     *
     * Requires one of the following roles:
     * * ROLE_ALERTS_READER
     * * ROLE_ALERTS_ADMIN
     * * PRISON
     */
    get: operations['retrieveAlertCodes']
    /**
     * Create an alert code
     * @description Create a new alert code, typically from the Alerts UI
     *
     * Requires one of the following roles:
     * * ROLE_ALERTS_ADMIN
     */
    post: operations['createAlertCode']
  }
  '/alert-types/{alertType}': {
    /**
     * Deactivate an alert type
     * @description Deactivate an alert type, typically from the Alerts UI
     *
     * Requires one of the following roles:
     * * ROLE_ALERTS_ADMIN
     */
    delete: operations['deactivateAlertType']
    /**
     * Update alert type
     * @description Set the properties of an alert type to the submitted value.
     *
     * Requires one of the following roles:
     * * ROLE_ALERTS_ADMIN
     */
    patch: operations['updateAlertType']
  }
  '/alert-codes/{alertCode}': {
    /**
     * Retrieve an alert code
     * @description Retrieve an alert code, typically from the Alerts UI
     *
     * Requires one of the following roles:
     * * ROLE_ALERTS_READER
     * * ROLE_ALERTS_ADMIN
     * * PRISON
     */
    get: operations['retrieveAlertCode']
    /**
     * Deactivate an alert code
     * @description Deactivate an alert code, typically from the Alerts UI
     *
     * Requires one of the following roles:
     * * ROLE_ALERTS_ADMIN
     */
    delete: operations['deactivateAlertCode']
    /**
     * Update alert code
     * @description Set the properties of an alert code to the submitted value.
     *
     * Requires one of the following roles:
     * * ROLE_ALERTS_ADMIN
     */
    patch: operations['updateAlertCode']
  }
  '/prisoners/{prisonNumber}/alerts': {
    /**
     * Gets all the alerts for a prisoner by their prison number
     * @description
     *
     * Requires one of the following roles:
     * * ROLE_ALERTS_READER
     * * ROLE_ALERTS_ADMIN
     * * PRISON
     */
    get: operations['retrievePrisonerAlerts']
  }
  '/prisoners/alerts': {
    /**
     * Gets all the alerts for prisoners by their prison numbers
     * @description Returns all the alerts for the supplied prison numbers. The alerts for each prisoner are mapped to their prison number.
     *
     * Requires one of the following roles:
     * * ROLE_ALERTS_READER
     * * ROLE_ALERTS_ADMIN
     * * PRISON
     */
    get: operations['retrievePrisonerAlerts_1']
  }
  '/alerts/{alertUuid}/auditEvents': {
    /**
     * Get audit events for an alert
     * @description This endpoint retrieves all the audit events for a given alert
     *
     * Requires one of the following roles:
     * * ROLE_ALERTS_READER
     * * ROLE_ALERTS_ADMIN
     * * PRISON
     * * ROLE_NOMIS_ALERTS
     */
    get: operations['retrieveAlertAuditEvents']
  }
  '/alert-types/{alertTypeCode}': {
    /**
     * Get an alert type
     * @description Returns the specified alert type.
     *
     * Requires one of the following roles:
     * * ROLE_ALERTS_READER
     * * ROLE_ALERTS_ADMIN
     * * PRISON
     */
    get: operations['retrieveAlertType']
  }
}

export type webhooks = Record<string, never>

export interface components {
  schemas: {
    /** @description The alert data to use to update an alert in the service */
    UpdateAlert: {
      /**
       * @description The updated description of the alert. Will be ignored if null and will clear the description if empty. This is a free text field and can be used to provide additional information about the alert e.g. the reasons for adding it.It is limited to 4000 characters.
       * @example Alert description
       */
      description?: string
      /**
       * @description The updated user, staff member, approving person or organisation that authorised the alert to be added. Will be ignored if null and will clear the authorised by value if empty. This is a free text field and can be used to record the name of the person who authorised the alert. It is limited to 40 characters.
       * @example A. Nurse, An Agency
       */
      authorisedBy?: string
      /**
       * Format: date
       * @description The date the alert should be active from. If set to null the field will be ignoredThe active from date can be in the past or the future, but must be before the active to date
       * @example 2021-09-27
       */
      activeFrom?: string
      /**
       * Format: date
       * @description The date the alert should be active until. If set to null i.e. cleared, the alert will be active indefinitely. The active to date can be in the past or the future, but must be after the active from date
       * @example 2022-07-15
       */
      activeTo?: string
      /**
       * @description An additional comment to append to comments thread associated with the alert. Will be ignored if null or empty. It is a free text field limited to 1000 characters.
       * @example Additional user comment on the alert comment thread
       */
      appendComment?: string
    }
    ErrorResponse: {
      /** Format: int32 */
      status: number
      errorCode?: string
      userMessage?: string
      developerMessage?: string
      moreInfo?: string
    }
    /** @description An alert associated with a person */
    Alert: {
      /**
       * Format: uuid
       * @description The unique identifier assigned to the alert
       * @example 8cdadcf3-b003-4116-9956-c99bd8df6a00
       */
      alertUuid: string
      /**
       * @description The prison number of the person the alert is for. Also referred to as the offender number, offender id or NOMS id.
       * @example A1234AA
       */
      prisonNumber: string
      alertCode: components['schemas']['AlertCodeSummary']
      /**
       * @description The description of the alert. It is a free text field and is used to provide additional information about the alert e.g. the reasons for adding it.It is limited to 4000 characters.
       * @example Alert description
       */
      description?: string
      /**
       * @description The user, staff member, approving person or organisation that authorised the alert to be added. It is a free text field and is used to record the name of the person who authorised the alert. It is limited to 40 characters.
       * @example A. Nurse, An Agency
       */
      authorisedBy?: string
      /**
       * Format: date
       * @description The date the alert should be active from. If not provided, the alert will be active from the current date. The active from date can be in the past or the future, but must be before the active to date
       * @example 2021-09-27
       */
      activeFrom: string
      /**
       * Format: date
       * @description The date the alert should be active until. If not provided, the alert will be active indefinitely. The active to date can be in the past or the future, but must be after the active from date
       * @example 2022-07-15
       */
      activeTo?: string
      /**
       * @description Indicates that the alert is active for the person. Alerts are active if their active from date is in the past and their active to date is either null or in the future. Note that this field is read only and cannot be set directly using the API.
       * @example true
       */
      isActive: boolean
      /** @description The comments thread associated with the alert. The comments are ordered by the date and time they were created, with the most recent comment first. */
      comments: components['schemas']['Comment'][]
      /**
       * Format: date-time
       * @description The date and time the alert was created
       */
      createdAt: string
      /**
       * @description The username of the user who created the alert
       * @example USER1234
       */
      createdBy: string
      /**
       * @description The displayable name of the user who created the alert
       * @example Firstname Lastname
       */
      createdByDisplayName: string
      /**
       * Format: date-time
       * @description The date and time the alert was last modified
       */
      lastModifiedAt?: string
      /**
       * @description The username of the user who last modified the alert
       * @example USER1234
       */
      lastModifiedBy?: string
      /**
       * @description The displayable name of the user who last modified the alert
       * @example Firstname Lastname
       */
      lastModifiedByDisplayName?: string
    }
    /** @description The summary information of an alert code used to categorise alerts */
    AlertCodeSummary: {
      /**
       * @description The short code for the alert type
       * @example A
       */
      alertTypeCode: string
      /**
       * @description The description of the alert type
       * @example Alert type description
       */
      alertTypeDescription: string
      /**
       * @description The short code for the alert code. Usually starts with the alert type code
       * @example ABC
       */
      code: string
      /**
       * @description The description of the alert code
       * @example Alert code description
       */
      description: string
    }
    /** @description A comment appended to an alert comment thread */
    Comment: {
      /**
       * Format: uuid
       * @description The unique identifier assigned to the comment
       * @example 476939e3-7cc1-4c5f-8f54-e7d055d1d50c
       */
      commentUuid: string
      /**
       * @description The comment text appended to the alert comment thread. It is a free text field limited to 1000 characters.
       * @example Additional user comment on the alert comment thread
       */
      comment: string
      /**
       * Format: date-time
       * @description The date and time the comment was created and appended to the alert comment thread
       */
      createdAt: string
      /**
       * @description The username of the user who created the comment and appended it to the alert comment thread
       * @example USER1234
       */
      createdBy: string
      /**
       * @description The displayable name of the user who created the comment and appended it to the alert comment thread
       * @example Firstname Lastname
       */
      createdByDisplayName: string
    }
    /** @description The request body for migrating an alert from NOMIS to DPS */
    MigrateAlert: {
      /**
       * Format: int64
       * @description The internal NOMIS id for the offender booking. An alert in NOMIS is uniquely identified by the offender booking id and alert sequence.This is returned as part of the migrated alert response for mapping between NOMIS and DPS.
       * @example 12345
       */
      offenderBookId: number
      /**
       * Format: int32
       * @description The sequence of the NOMIS offender booking. A sequence of 1 means the alert is from the current booking. A sequence of > 1 means the alert is from a historic booking.This is returned as part of the migrated alert response for mapping between NOMIS and DPS.
       * @example 1
       */
      bookingSeq: number
      /**
       * Format: int32
       * @description The NOMIS alert sequence. An alert in NOMIS is uniquely identified by the offender booking id and alert sequence.This is returned as part of the migrated alert response for mapping between NOMIS and DPS.
       * @example 2
       */
      alertSeq: number
      /**
       * @description The alert code for the alert. A person can only have one alert using each code active at any one time. The alert code must exist but can be inactive when migrating an alert.
       * @example ABC
       */
      alertCode: string
      /**
       * @description The description of the alert. This is a free text field and can be used to provide additional information about the alert e.g. the reasons for adding it.It is limited to 4000 characters when migrating an alert.
       * @example Alert description
       */
      description?: string
      /**
       * @description The user, staff member, approving person or organisation that authorised the alert to be added. This is a free text field and can be used to record the name of the person who authorised the alert. It is limited to 40 characters.
       * @example A. Nurse, An Agency
       */
      authorisedBy?: string
      /**
       * Format: date
       * @description The date the alert should be active from. The active from date can be in the past or the future, but should be on or before the active to date
       * @example 2021-09-27
       */
      activeFrom: string
      /**
       * Format: date
       * @description The date the alert should be active until. If not provided, the alert will be active indefinitely. The active to date can be in the past or the future, but should be on or after the active from date
       * @example 2022-07-15
       */
      activeTo?: string
      /**
       * Format: date-time
       * @description The date and time the alert was created.
       */
      createdAt: string
      /**
       * @description The user id of the person who created the alert.
       * @example AB11DZ
       */
      createdBy: string
      /**
       * @description The displayable name of the person who created the alert.
       * @example C Reated
       */
      createdByDisplayName: string
      /**
       * Format: date-time
       * @description The date and time the alert was updated. Only provide if the alert has been updated since creation.
       */
      updatedAt?: string
      /**
       * @description The user id of the person who updated the alert. Required if updated at has been supplied.
       * @example AB11DZ
       */
      updatedBy?: string
      /**
       * @description The displayable name of the person who updated the alert. Required if updated at has been supplied.
       * @example Up Dated
       */
      updatedByDisplayName?: string
    }
    MigratedAlert: {
      /**
       * Format: int64
       * @description The internal NOMIS id for the offender booking. An alert in NOMIS is uniquely identified by the offender booking id and alert sequence.This is returned as part of the migrated alert response for mapping between NOMIS and DPS.
       * @example 12345
       */
      offenderBookId: number
      /**
       * Format: int32
       * @description The sequence of the NOMIS offender booking. A sequence of 1 means the alert is from the current booking. A sequence of > 1 means the alert is from a historic booking.This is returned as part of the migrated alert response for mapping between NOMIS and DPS.
       * @example 1
       */
      bookingSeq: number
      /**
       * Format: int32
       * @description The NOMIS alert sequence. An alert in NOMIS is uniquely identified by the offender booking id and alert sequence.This is returned as part of the migrated alert response for mapping between NOMIS and DPS.
       * @example 2
       */
      alertSeq: number
      /**
       * Format: uuid
       * @description The unique identifier assigned to the alert
       * @example 8cdadcf3-b003-4116-9956-c99bd8df6a00
       */
      alertUuid: string
    }
    /** @description The alert data to use to create an alert in the service */
    MigrateAlertRequest: {
      /**
       * @description The prison number of the person the alert is for. Also referred to as the offender number, offender id or NOMS id.
       * @example A1234AA
       */
      prisonNumber: string
      /**
       * @description The alert code for the alert. A person can only have one alert using each code active at any one time. The alert code must exist and be active.
       * @example ABC
       */
      alertCode: string
      /**
       * @description The description of the alert. This is a free text field and can be used to provide additional information about the alert e.g. the reasons for adding it.It is limited to 1000 characters.
       * @example Alert description
       */
      description?: string
      /**
       * @description The user, staff member, approving person or organisation that authorised the alert to be added. This is a free text field and can be used to record the name of the person who authorised the alert. It is limited to 40 characters.
       * @example A. Nurse, An Agency
       */
      authorisedBy?: string
      /**
       * Format: date
       * @description The date the alert should be active from. If not provided, the alert will be active from the current date. The active from date can be in the past or the future, but must be before the active to date
       * @example 2021-09-27
       */
      activeFrom: string
      /**
       * Format: date
       * @description The date the alert should be active until. If not provided, the alert will be active indefinitely. The active to date can be in the past or the future, but must be after the active from date
       * @example 2022-07-15
       */
      activeTo?: string
      /**
       * Format: date-time
       * @description The date the alert was created
       */
      createdAt: string
      /**
       * @description The user ID of the person who created the alert
       * @example AB11DZ
       */
      createdBy: string
      /**
       * @description The friendly name of the person who created the alert
       * @example C Reated
       */
      createdByDisplayName: string
      /**
       * Format: date-time
       * @description The date the alert was updated
       */
      updatedAt?: string
      /**
       * @description The user ID of the person who updated the alert
       * @example AB11DZ
       */
      updatedBy?: string
      /**
       * @description The friendly name of the person who updated the alert
       * @example C Reated
       */
      updatedByDisplayName?: string
      /** @description The threaded comments that are stored against an alert */
      comments: components['schemas']['MigrateCommentRequest'][]
    }
    /** @description The threaded comments that are stored against an alert */
    MigrateCommentRequest: {
      /**
       * @description The text added at the comment
       * @example This is a comment
       */
      comment: string
      /**
       * Format: date-time
       * @description The date the alert was created
       */
      createdAt: string
      /**
       * @description The user ID of the person who created the alert
       * @example AB11DZ
       */
      createdBy: string
      /**
       * @description The friendly name of the person who created the alert
       * @example C Reated
       */
      createdByDisplayName: string
    }
    /** @description The request body for bulk creating alerts for multiple people */
    BulkCreateAlerts: {
      /**
       * @description The prison numbers of the people to create alerts for. Also referred to as the offender number, offender id or NOMS id.
       * @example A1234AA
       */
      prisonNumbers: string[]
      /**
       * @description The alert code for the alert. A person can only have one alert using each code active at any one time. The alert code must exist and be active.
       * @example ABC
       */
      alertCode: string
      /**
       * @description The strategy to use when creating alerts in bulk
       * @example ADD_MISSING
       * @enum {string}
       */
      mode: 'ADD_MISSING' | 'EXPIRE_AND_REPLACE'
      /**
       * @description The strategy to use when cleaning up existing alerts for people supplied list of prison numbers
       * @example KEEP_ALL
       * @enum {string}
       */
      cleanupMode: 'KEEP_ALL' | 'EXPIRE_FOR_PRISON_NUMBERS_NOT_SPECIFIED'
    }
    /** @description A set of alerts created in bulk. Contains detailed information of the result of a bulk alert creation request. */
    BulkAlert: {
      /**
       * Format: uuid
       * @description The unique identifier assigned to the alerts created in bulk
       * @example b49053d8-3f29-4b1e-a9c5-15bde8c6e6cf
       */
      bulkAlertUuid: string
      request: components['schemas']['BulkCreateAlerts']
      /**
       * Format: date-time
       * @description The date and time the alerts were created in bulk
       */
      requestedAt: string
      /**
       * @description The username of the user who created the alerts in bulk
       * @example USER1234
       */
      requestedBy: string
      /**
       * @description The displayable name of the user who created the alerts in bulk
       * @example Firstname Lastname
       */
      requestedByDisplayName: string
      /**
       * Format: date-time
       * @description The date and time the request to create alerts in bulk was completed
       */
      completedAt: string
      /**
       * @description Whether the request to create alerts in bulk was successful or not
       * @example true
       */
      successful: boolean
      /** @description Collection of displayable messages relating to the result of the bulk alert creation request as a whole */
      messages: string[]
      /** @description Collection of existing active alerts that were not modified and resulted in no additional alert being created for the associated prison number. */
      existingActiveAlerts: components['schemas']['BulkAlertAlert'][]
      /** @description Collection of new alerts that were created in bulk */
      alertsCreated: components['schemas']['BulkAlertAlert'][]
      /** @description Collection of existing alerts that were updated as a result of the bulk alert creation request. The message for updated alerts will contain what was updated for example changing the active from date. */
      alertsUpdated: components['schemas']['BulkAlertAlert'][]
      /** @description Collection of existing alerts that were made inactive as a result of the bulk alert creation request */
      alertsExpired: components['schemas']['BulkAlertAlert'][]
    }
    /** @description Summary information of an alert affected by a bulk alert creation request */
    BulkAlertAlert: {
      /**
       * Format: uuid
       * @description The unique identifier assigned to the alert
       * @example 8cdadcf3-b003-4116-9956-c99bd8df6a00
       */
      alertUuid: string
      /**
       * @description The prison number of the person the alert is for. Also referred to as the offender number, offender id or NOMS id.
       * @example A1234AA
       */
      prisonNumber: string
      /** @description Optional displayable message relating to the result of the bulk alert creation request specific to this alert. For example the description of the updates that were applied to this alert. */
      message: string
    }
    /** @description The alert data to use to create an alert in the service */
    CreateAlert: {
      /**
       * @description The prison number of the person the alert is for. Also referred to as the offender number, offender id or NOMS id.
       * @example A1234AA
       */
      prisonNumber: string
      /**
       * @description The alert code for the alert. A person can only have one alert using each code active at any one time. The alert code must exist and be active.
       * @example ABC
       */
      alertCode: string
      /**
       * @description The description of the alert. This is a free text field and can be used to provide additional information about the alert e.g. the reasons for adding it.It is limited to 4000 characters.
       * @example Alert description
       */
      description?: string
      /**
       * @description The user, staff member, approving person or organisation that authorised the alert to be added. This is a free text field and can be used to record the name of the person who authorised the alert. It is limited to 40 characters.
       * @example A. Nurse, An Agency
       */
      authorisedBy?: string
      /**
       * Format: date
       * @description The date the alert should be active from. If not provided, the alert will be active from the current date. The active from date can be in the past or the future, but must be before the active to date
       * @example 2021-09-27
       */
      activeFrom?: string
      /**
       * Format: date
       * @description The date the alert should be active until. If not provided, the alert will be active indefinitely. The active to date can be in the past or the future, but must be after the active from date
       * @example 2022-07-15
       */
      activeTo?: string
    }
    /** @description The request body for creating a new alert type */
    CreateAlertTypeRequest: {
      /**
       * @description The short code for the alert type
       * @example A
       */
      code: string
      /**
       * @description The description of the alert type
       * @example Alert type description
       */
      description: string
    }
    /** @description An alert code used to categorise alerts */
    AlertCode: {
      /**
       * @description The short code for the alert type
       * @example A
       */
      alertTypeCode: string
      /**
       * @description The short code for the alert code. Usually starts with the alert type code
       * @example ABC
       */
      code: string
      /**
       * @description The description of the alert code
       * @example Alert code description
       */
      description: string
      /**
       * Format: int32
       * @description The sequence number of the alert code within the alert type. Used for ordering alert codes correctly in lists and drop downs. A value of 0 indicates this is the default alert code for the alert type
       * @example 3
       */
      listSequence: number
      /**
       * @description Indicates that the alert code is active and can be used. Inactive alert codes are not returned by default in the API
       * @example true
       */
      isActive: boolean
      /**
       * Format: date-time
       * @description The date and time the alert code was created
       */
      createdAt: string
      /**
       * @description The username of the user who created the alert code
       * @example USER1234
       */
      createdBy: string
      /**
       * Format: date-time
       * @description The date and time the alert code was last modified
       */
      modifiedAt?: string
      /**
       * @description The username of the user who last modified the alert code
       * @example USER1234
       */
      modifiedBy?: string
      /**
       * Format: date-time
       * @description The date and time the alert code was deactivated
       */
      deactivatedAt?: string
      /**
       * @description The username of the user who deactivated the alert code
       * @example USER1234
       */
      deactivatedBy?: string
    }
    /** @description An alert type used to categorise alerts */
    AlertType: {
      /**
       * @description The short code for the alert type
       * @example A
       */
      code: string
      /**
       * @description The description of the alert type
       * @example Alert type description
       */
      description: string
      /**
       * Format: int32
       * @description The sequence number of the alert type. Used for ordering alert types correctly in lists and drop downs. A value of 0 indicates this is the default alert type
       * @example 3
       */
      listSequence: number
      /**
       * @description Indicates that the alert type is active and can be used. Inactive alert types are not returned by default in the API
       * @example true
       */
      isActive: boolean
      /**
       * Format: date-time
       * @description The date and time the alert type was created
       */
      createdAt: string
      /**
       * @description The username of the user who created the alert type
       * @example USER1234
       */
      createdBy: string
      /**
       * Format: date-time
       * @description The date and time the alert type was last modified
       */
      modifiedAt?: string
      /**
       * @description The username of the user who last modified the alert type
       * @example USER1234
       */
      modifiedBy?: string
      /**
       * Format: date-time
       * @description The date and time the alert type was deactivated
       */
      deactivatedAt?: string
      /**
       * @description The username of the user who deactivated the alert type
       * @example USER1234
       */
      deactivatedBy?: string
      /** @description The alert codes associated with this alert type */
      alertCodes: components['schemas']['AlertCode'][]
    }
    /** @description The request body for creating a new alert code */
    CreateAlertCodeRequest: {
      /**
       * @description The short code for the alert code
       * @example A
       */
      code: string
      /**
       * @description The description of the alert code
       * @example Alert code description
       */
      description: string
      /**
       * @description The short code for the parent type
       * @example A
       */
      parent: string
    }
    /** @description The request body for updating the properties of an alert type */
    UpdateAlertTypeRequest: {
      /**
       * @description The new property value(s) to be updated onto an alert type
       * @example New description value for an alert type
       */
      description: string
    }
    /** @description The request body for updating the properties of an alert code */
    UpdateAlertCodeRequest: {
      /**
       * @description The new property value(s) to be updated onto an alert code
       * @example New description value for an alert code
       */
      description: string
    }
    PageAlert: {
      /** Format: int32 */
      totalPages?: number
      /** Format: int64 */
      totalElements?: number
      first?: boolean
      last?: boolean
      /** Format: int32 */
      size?: number
      content?: components['schemas']['Alert'][]
      /** Format: int32 */
      number?: number
      sort?: components['schemas']['SortObject'][]
      /** Format: int32 */
      numberOfElements?: number
      pageable?: components['schemas']['PageableObject']
      empty?: boolean
    }
    PageableObject: {
      /** Format: int64 */
      offset?: number
      sort?: components['schemas']['SortObject'][]
      /** Format: int32 */
      pageSize?: number
      /** Format: int32 */
      pageNumber?: number
      paged?: boolean
      unpaged?: boolean
    }
    SortObject: {
      direction?: string
      nullHandling?: string
      ascending?: boolean
      property?: string
      ignoreCase?: boolean
    }
    AuditEvent: {
      /**
       * @description The audit event type
       * @example CREATED
       * @enum {string}
       */
      action: 'CREATED' | 'UPDATED' | 'DELETED'
      /**
       * @description A description of what has changed
       * @example The active to date was updated from 2012-02-03 to 2012-04-05
       */
      description: string
      /**
       * Format: date-time
       * @description When the event happened
       */
      actionedAt: string
      /**
       * @description The user id of the person who was audited
       * @example AB1234AA
       */
      actionedBy: string
      /**
       * @description The friendly name of the person who was audited
       * @example An Auditer
       */
      actionedByDisplayName: string
    }
  }
  responses: never
  parameters: never
  requestBodies: never
  headers: never
  pathItems: never
}

export type $defs = Record<string, never>

export type external = Record<string, never>

export interface operations {
  /**
   * Get an alert by its unique identifier
   * @description Returns the alert with the matching identifier.
   *
   * Requires one of the following roles:
   * * ROLE_ALERTS_READER
   * * ROLE_ALERTS_ADMIN
   * * PRISON
   * * ROLE_NOMIS_ALERTS
   */
  retrieveAlert: {
    parameters: {
      path: {
        /** @description Alert unique identifier */
        alertUuid: string
      }
    }
    responses: {
      /** @description Alert found */
      200: {
        content: {
          'application/json': components['schemas']['Alert']
        }
      }
      /** @description Unauthorised, requires a valid Oauth2 token */
      401: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Forbidden, requires an appropriate role */
      403: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description The alert associated with this identifier was not found. */
      404: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  /**
   * Update an alert
   * @description
   *
   * Requires one of the following roles:
   * * ROLE_ALERTS_WRITER
   * * ROLE_ALERTS_ADMIN
   * * UPDATE_ALERT
   * * ROLE_NOMIS_ALERTS
   */
  updateAlert: {
    parameters: {
      header?: {
        /** @description The username of the user interacting with the client service. This can be used instead of the `user_name` or `username` token claim when the client service is acting on behalf of a user. The value passed in the username header will only be used if a `user_name` or `username` token claim is not present. */
        Username?: string
        /** @description The source of the request. Will default to 'DPS' if not suppliedThis value will be assigned to the additionalInformation.source property in published domain events. A source value of 'NOMIS' will allow any username value that is less than 32 characters to be supplied. If this username is not found, its value will be used for the user display name property. A source value of 'NOMIS' will also allow no username value to be supplied and will use 'NOMIS' for both the username and display name properties. */
        Source?: string
      }
      path: {
        /** @description Alert unique identifier */
        alertUuid: string
      }
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['UpdateAlert']
      }
    }
    responses: {
      /** @description Alert updated successfully */
      200: {
        content: {
          'application/json': components['schemas']['Alert']
        }
      }
      /** @description Bad request */
      400: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Unauthorised, requires a valid Oauth2 token */
      401: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Forbidden, requires an appropriate role */
      403: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  /**
   * Delete an alert
   * @description This endpoint fully removes the alert from the system. It is used when an alert has been created in error or should otherwise be removed from this service. This endpoint will return 200 OK if the alert was not found or already deleted. This is to prevent low value warnings being logged.
   *
   * Requires one of the following roles:
   * * ROLE_ALERTS_WRITER
   * * ROLE_ALERTS_ADMIN
   * * UPDATE_ALERT
   * * ROLE_NOMIS_ALERTS
   */
  deleteAlert: {
    parameters: {
      header?: {
        /** @description The username of the user interacting with the client service. This can be used instead of the `user_name` or `username` token claim when the client service is acting on behalf of a user. The value passed in the username header will only be used if a `user_name` or `username` token claim is not present. */
        Username?: string
        /** @description The source of the request. Will default to 'DPS' if not suppliedThis value will be assigned to the additionalInformation.source property in published domain events. A source value of 'NOMIS' will allow any username value that is less than 32 characters to be supplied. If this username is not found, its value will be used for the user display name property. A source value of 'NOMIS' will also allow no username value to be supplied and will use 'NOMIS' for both the username and display name properties. */
        Source?: string
      }
      path: {
        /** @description Alert unique identifier */
        alertUuid: string
      }
    }
    responses: {
      /** @description Alert deleted */
      204: {
        content: never
      }
      /** @description Unauthorised, requires a valid Oauth2 token */
      401: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Forbidden, requires an appropriate role */
      403: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Alert was not found or already deleted */
      404: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  /**
   * Migrate all alerts for a prisoner from NOMIS
   * @description
   *
   * Requires one of the following roles:
   * * ROLE_ALERTS_ADMIN
   * * ROLE_NOMIS_ALERTS
   */
  createAlert: {
    parameters: {
      path: {
        /**
         * @description Prison number of the prisoner. Also referred to as the offender number, offender id or NOMS id
         * @example A1234AA
         */
        prisonNumber: string
      }
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['MigrateAlert'][]
      }
    }
    responses: {
      /** @description Alerts migrated successfully */
      201: {
        content: {
          'application/json': components['schemas']['MigratedAlert'][]
        }
      }
      /** @description Bad request */
      400: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Unauthorised, requires a valid Oauth2 token */
      401: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Forbidden, requires an appropriate role */
      403: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  /**
   * Migrate an alert from NOMIS
   * @deprecated
   * @description
   *
   * Requires one of the following roles:
   * * ROLE_ALERTS_ADMIN
   * * ROLE_NOMIS_ALERTS
   */
  migrateAlert: {
    requestBody: {
      content: {
        'application/json': components['schemas']['MigrateAlertRequest']
      }
    }
    responses: {
      /** @description Alert migrated successfully */
      201: {
        content: {
          'application/json': components['schemas']['Alert']
        }
      }
      /** @description Bad request */
      400: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Unauthorised, requires a valid Oauth2 token */
      401: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Forbidden, requires an appropriate role */
      403: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Conflict, the person already has an active alert using the supplied alert code */
      409: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  /**
   * Create alerts for multiple people in bulk
   * @description
   *
   * Requires one of the following roles:
   * * ROLE_ALERTS_ADMIN
   */
  bulkCreateAlerts: {
    parameters: {
      header?: {
        /** @description The username of the user interacting with the client service. This can be used instead of the `user_name` or `username` token claim when the client service is acting on behalf of a user. The value passed in the username header will only be used if a `user_name` or `username` token claim is not present. */
        Username?: string
        /** @description The source of the request. Will default to 'DPS' if not suppliedThis value will be assigned to the additionalInformation.source property in published domain events. A source value of 'NOMIS' will allow any username value that is less than 32 characters to be supplied. If this username is not found, its value will be used for the user display name property. A source value of 'NOMIS' will also allow no username value to be supplied and will use 'NOMIS' for both the username and display name properties. */
        Source?: string
      }
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['BulkCreateAlerts']
      }
    }
    responses: {
      /** @description Alerts created successfully */
      201: {
        content: {
          'application/json': components['schemas']['BulkAlert']
        }
      }
      /** @description Bad request */
      400: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Unauthorised, requires a valid Oauth2 token */
      401: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Forbidden, requires an appropriate role */
      403: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  /**
   * Create an alert
   * @description
   *
   * Requires one of the following roles:
   * * ROLE_ALERTS_WRITER
   * * ROLE_ALERTS_ADMIN
   * * UPDATE_ALERT
   * * ROLE_NOMIS_ALERTS
   */
  createAlert_1: {
    parameters: {
      header?: {
        /** @description The username of the user interacting with the client service. This can be used instead of the `user_name` or `username` token claim when the client service is acting on behalf of a user. The value passed in the username header will only be used if a `user_name` or `username` token claim is not present. */
        Username?: string
        /** @description The source of the request. Will default to 'DPS' if not suppliedThis value will be assigned to the additionalInformation.source property in published domain events. A source value of 'NOMIS' will allow any username value that is less than 32 characters to be supplied. If this username is not found, its value will be used for the user display name property. A source value of 'NOMIS' will also allow no username value to be supplied and will use 'NOMIS' for both the username and display name properties. */
        Source?: string
      }
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['CreateAlert']
      }
    }
    responses: {
      /** @description Alert created successfully */
      201: {
        content: {
          'application/json': components['schemas']['Alert']
        }
      }
      /** @description Bad request */
      400: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Unauthorised, requires a valid Oauth2 token */
      401: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Forbidden, requires an appropriate role */
      403: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Conflict, the person already has an active alert using the supplied alert code */
      409: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  /**
   * Get all alert types
   * @description Returns the full list of alert types and the alert codes within those types. By default this endpoint only returns active alert types and codes. The include inactive parameter can be used to return all alert types and codes.
   *
   * Requires one of the following roles:
   * * ROLE_ALERTS_READER
   * * ROLE_ALERTS_ADMIN
   * * PRISON
   */
  retrieveAlertTypes: {
    parameters: {
      query?: {
        /** @description Include inactive alert types and codes. Defaults to false */
        includeInactive?: boolean
      }
    }
    responses: {
      /** @description Alert types and codes found */
      200: {
        content: {
          'application/json': components['schemas']['AlertType'][]
        }
      }
      /** @description Unauthorised, requires a valid Oauth2 token */
      401: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Forbidden, requires an appropriate role */
      403: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  /**
   * Create an alert type
   * @description Create a new alert type, typically from the Alerts UI
   *
   * Requires one of the following roles:
   * * ROLE_ALERTS_ADMIN
   */
  createAlertType: {
    parameters: {
      header?: {
        /** @description The username of the user interacting with the client service. This can be used instead of the `user_name` or `username` token claim when the client service is acting on behalf of a user. The value passed in the username header will only be used if a `user_name` or `username` token claim is not present. */
        Username?: string
      }
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['CreateAlertTypeRequest']
      }
    }
    responses: {
      /** @description Alert type created */
      201: {
        content: {
          'application/json': components['schemas']['AlertType'][]
        }
      }
      /** @description Unauthorised, requires a valid Oauth2 token */
      401: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Forbidden, requires an appropriate role */
      403: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Conflict, the alert type code already exists */
      409: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  /**
   * Retrieve all alert codes
   * @description Retrieve all alert codes, typically from the Alerts UI
   *
   * Requires one of the following roles:
   * * ROLE_ALERTS_READER
   * * ROLE_ALERTS_ADMIN
   * * PRISON
   */
  retrieveAlertCodes: {
    parameters: {
      query?: {
        /** @description Include inactive alert types and codes. Defaults to false */
        includeInactive?: boolean
      }
    }
    responses: {
      /** @description Alert code retrieved */
      200: {
        content: {
          'application/json': components['schemas']['AlertCode'][]
        }
      }
      /** @description Unauthorised, requires a valid Oauth2 token */
      401: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Forbidden, requires an appropriate role */
      403: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  /**
   * Create an alert code
   * @description Create a new alert code, typically from the Alerts UI
   *
   * Requires one of the following roles:
   * * ROLE_ALERTS_ADMIN
   */
  createAlertCode: {
    parameters: {
      header?: {
        /** @description The username of the user interacting with the client service. This can be used instead of the `user_name` or `username` token claim when the client service is acting on behalf of a user. The value passed in the username header will only be used if a `user_name` or `username` token claim is not present. */
        Username?: string
      }
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['CreateAlertCodeRequest']
      }
    }
    responses: {
      /** @description Alert code created */
      201: {
        content: {
          'application/json': components['schemas']['AlertCode']
        }
      }
      /** @description Unauthorised, requires a valid Oauth2 token */
      401: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Forbidden, requires an appropriate role */
      403: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Not found, the parent alert type has not been found */
      404: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Conflict, the alert code already exists */
      409: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  /**
   * Deactivate an alert type
   * @description Deactivate an alert type, typically from the Alerts UI
   *
   * Requires one of the following roles:
   * * ROLE_ALERTS_ADMIN
   */
  deactivateAlertType: {
    parameters: {
      header?: {
        /** @description The username of the user interacting with the client service. This can be used instead of the `user_name` or `username` token claim when the client service is acting on behalf of a user. The value passed in the username header will only be used if a `user_name` or `username` token claim is not present. */
        Username?: string
      }
      path: {
        alertType: string
      }
    }
    responses: {
      /** @description Alert type deactivated */
      204: {
        content: {
          'application/json': components['schemas']['AlertType']
        }
      }
      /** @description Unauthorised, requires a valid Oauth2 token */
      401: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Forbidden, requires an appropriate role */
      403: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Not found, the alert type was is not found */
      404: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  /**
   * Update alert type
   * @description Set the properties of an alert type to the submitted value.
   *
   * Requires one of the following roles:
   * * ROLE_ALERTS_ADMIN
   */
  updateAlertType: {
    parameters: {
      header?: {
        /** @description The username of the user interacting with the client service. This can be used instead of the `user_name` or `username` token claim when the client service is acting on behalf of a user. The value passed in the username header will only be used if a `user_name` or `username` token claim is not present. */
        Username?: string
      }
      path: {
        alertType: string
      }
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['UpdateAlertTypeRequest']
      }
    }
    responses: {
      /** @description Alert type updated */
      200: {
        content: {
          'application/json': components['schemas']['AlertType']
        }
      }
      /** @description Unauthorised, requires a valid Oauth2 token */
      401: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Forbidden, requires an appropriate role */
      403: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Not found, the alert type was is not found */
      404: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  /**
   * Retrieve an alert code
   * @description Retrieve an alert code, typically from the Alerts UI
   *
   * Requires one of the following roles:
   * * ROLE_ALERTS_READER
   * * ROLE_ALERTS_ADMIN
   * * PRISON
   */
  retrieveAlertCode: {
    parameters: {
      path: {
        alertCode: string
      }
    }
    responses: {
      /** @description Alert code retrieved */
      200: {
        content: {
          'application/json': components['schemas']['AlertCode']
        }
      }
      /** @description Unauthorised, requires a valid Oauth2 token */
      401: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Forbidden, requires an appropriate role */
      403: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Not found, the alert code was is not found */
      404: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  /**
   * Deactivate an alert code
   * @description Deactivate an alert code, typically from the Alerts UI
   *
   * Requires one of the following roles:
   * * ROLE_ALERTS_ADMIN
   */
  deactivateAlertCode: {
    parameters: {
      header?: {
        /** @description The username of the user interacting with the client service. This can be used instead of the `user_name` or `username` token claim when the client service is acting on behalf of a user. The value passed in the username header will only be used if a `user_name` or `username` token claim is not present. */
        Username?: string
      }
      path: {
        alertCode: string
      }
    }
    responses: {
      /** @description Alert code deactivated */
      204: {
        content: never
      }
      /** @description Unauthorised, requires a valid Oauth2 token */
      401: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Forbidden, requires an appropriate role */
      403: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Not found, the alert code was is not found */
      404: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  /**
   * Update alert code
   * @description Set the properties of an alert code to the submitted value.
   *
   * Requires one of the following roles:
   * * ROLE_ALERTS_ADMIN
   */
  updateAlertCode: {
    parameters: {
      header?: {
        /** @description The username of the user interacting with the client service. This can be used instead of the `user_name` or `username` token claim when the client service is acting on behalf of a user. The value passed in the username header will only be used if a `user_name` or `username` token claim is not present. */
        Username?: string
      }
      path: {
        alertCode: string
      }
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['UpdateAlertCodeRequest']
      }
    }
    responses: {
      /** @description Alert code updated */
      200: {
        content: {
          'application/json': components['schemas']['AlertCode']
        }
      }
      /** @description Unauthorised, requires a valid Oauth2 token */
      401: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Forbidden, requires an appropriate role */
      403: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Not found, the alert code was is not found */
      404: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  /**
   * Gets all the alerts for a prisoner by their prison number
   * @description
   *
   * Requires one of the following roles:
   * * ROLE_ALERTS_READER
   * * ROLE_ALERTS_ADMIN
   * * PRISON
   */
  retrievePrisonerAlerts: {
    parameters: {
      query?: {
        /**
         * @description Return only active (true) or inactive (false) alerts. If not provided or a null value is supplied, all alerts are returned
         * @example true
         */
        isActive?: boolean
        /**
         * @description Filter by alert type code or codes. Supply a comma separated list of alert type codes to filter by more than one code
         * @example M
         */
        alertType?: string
        /**
         * @description Filter by alert code or codes. Supply a comma separated list of alert codes to filter by more than one code
         * @example AS
         */
        alertCode?: string
        /**
         * @description Filter alerts that have an active on date or after the supplied date
         * @example 2023-09-27
         */
        activeFromStart?: string
        /**
         * @description Filter alerts that have an active on date up to or before the supplied date
         * @example 2021-11-15
         */
        activeFromEnd?: string
        /**
         * @description Filter alerts that contain the search text in their description, authorised by or comments. The search is case insensitive and will match any part of the description, authorised by or comment text
         * @example Search text
         */
        search?: string
        /** @description Zero-based page index (0..N) */
        page?: number
        /** @description The size of the page to be returned */
        size?: number
        /** @description Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported. */
        sort?: string[]
      }
      path: {
        /**
         * @description Prison number of the prisoner. Also referred to as the offender number, offender id or NOMS id
         * @example A1234AA
         */
        prisonNumber: string
      }
    }
    responses: {
      /** @description Alerts found */
      200: {
        content: {
          'application/json': components['schemas']['PageAlert']
        }
      }
      /** @description Unauthorised, requires a valid Oauth2 token */
      401: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Forbidden, requires an appropriate role */
      403: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  /**
   * Gets all the alerts for prisoners by their prison numbers
   * @description Returns all the alerts for the supplied prison numbers. The alerts for each prisoner are mapped to their prison number.
   *
   * Requires one of the following roles:
   * * ROLE_ALERTS_READER
   * * ROLE_ALERTS_ADMIN
   * * PRISON
   */
  retrievePrisonerAlerts_1: {
    parameters: {
      query: {
        /** @description The prison numbers of the prisoners */
        prisonNumbers: string[]
      }
    }
    responses: {
      /** @description Alerts found */
      200: {
        content: {
          'application/json': {
            [key: string]: components['schemas']['Alert'][]
          }
        }
      }
      /** @description Unauthorised, requires a valid Oauth2 token */
      401: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Forbidden, requires an appropriate role */
      403: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  /**
   * Get audit events for an alert
   * @description This endpoint retrieves all the audit events for a given alert
   *
   * Requires one of the following roles:
   * * ROLE_ALERTS_READER
   * * ROLE_ALERTS_ADMIN
   * * PRISON
   * * ROLE_NOMIS_ALERTS
   */
  retrieveAlertAuditEvents: {
    parameters: {
      header?: {
        /** @description The source of the request. Will default to 'DPS' if not suppliedThis value will be assigned to the additionalInformation.source property in published domain events. A source value of 'NOMIS' will allow any username value that is less than 32 characters to be supplied. If this username is not found, its value will be used for the user display name property. A source value of 'NOMIS' will also allow no username value to be supplied and will use 'NOMIS' for both the username and display name properties. */
        Source?: string
      }
      path: {
        /** @description Alert unique identifier */
        alertUuid: string
      }
    }
    responses: {
      /** @description Audit events retrieved for a given alert */
      200: {
        content: {
          'application/json': components['schemas']['AuditEvent'][]
        }
      }
      /** @description Unauthorised, requires a valid Oauth2 token */
      401: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Forbidden, requires an appropriate role */
      403: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Alert was not found or already deleted */
      404: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  /**
   * Get an alert type
   * @description Returns the specified alert type.
   *
   * Requires one of the following roles:
   * * ROLE_ALERTS_READER
   * * ROLE_ALERTS_ADMIN
   * * PRISON
   */
  retrieveAlertType: {
    parameters: {
      path: {
        alertTypeCode: string
      }
    }
    responses: {
      /** @description Alert type found */
      200: {
        content: {
          'application/json': components['schemas']['AlertType'][]
        }
      }
      /** @description Unauthorised, requires a valid Oauth2 token */
      401: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Forbidden, requires an appropriate role */
      403: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Not found, the alert type was is not found */
      404: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
}
